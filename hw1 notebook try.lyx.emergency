#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language hebrew
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style swedish
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*

\lang english
Introduction To Artifical Intelligence - HW1
\end_layout

\begin_layout Section*

\lang english
Yoni Ben-Zvi 203668900 Danny Priymak 307003434
\end_layout

\begin_layout Subsection*

\lang english
Question 1
\end_layout

\begin_layout Standard

\lang english
The requested table is produced by the following code:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from tabulate import tabulate
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

list1 = [] for x in range(1, 11):
\end_layout

\begin_layout Plain Layout

	list2 = [x, math.factorial(x), math.factorial(x)*(5**(x-1))]    
\end_layout

\begin_layout Plain Layout

	list1.append(list2)
\end_layout

\begin_layout Plain Layout

print(tabulate(list1, headers=['k','l = 0','l = 5'], tablefmt='orgtbl'))
 
\end_layout

\end_inset

and its output is:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

|   k |   l = 0 |         l = 5 |
\end_layout

\begin_layout Plain Layout

|-----+---------+---------------|
\end_layout

\begin_layout Plain Layout

|   1 |       1 |             1 | 
\end_layout

\begin_layout Plain Layout

|   2 |       2 |            10 | 
\end_layout

\begin_layout Plain Layout

|   3 |       6 |           150 | 
\end_layout

\begin_layout Plain Layout

|   4 |      24 |          3000 |
\end_layout

\begin_layout Plain Layout

|   5 |     120 |         75000 |
\end_layout

\begin_layout Plain Layout

|   6 |     720 |       2250000 |
\end_layout

\begin_layout Plain Layout

|   7 |    5040 |      78750000 |
\end_layout

\begin_layout Plain Layout

|   8 |   40320 |    3150000000 | 
\end_layout

\begin_layout Plain Layout

|   9 |  362880 |  141750000000 |
\end_layout

\begin_layout Plain Layout

|  10 | 3628800 | 7087500000000 |
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 2
\end_layout

\begin_layout Standard

\lang english
The branching factor's extremum values are:
\end_layout

\begin_layout Standard

\lang english
Maximum = 
\begin_inset Formula $k+l$
\end_inset

 because if our graph is a complete graph, each vertex is connected to all
 other gas stations and all other delivery points.
 If the current vertex is 
\begin_inset Formula $v_{0}$
\end_inset

, then it is connected to all other 
\begin_inset Formula $k+l$
\end_inset

 vertices of the graph.
 This is the maximal number of vertices it can be connected to using the
 operators defined in the exercise.
\end_layout

\begin_layout Standard

\lang english
Minimum = 
\begin_inset Formula $1$
\end_inset

 because if the graph is 
\begin_inset Formula $1$
\end_inset

-regular (all outdegrees are 
\begin_inset Formula $1$
\end_inset

) then the maximal outdegree of each vertex is 
\begin_inset Formula $1$
\end_inset

, and therefore the graph's branching factor is 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Subsection*

\lang english
Question 3
\end_layout

\begin_layout Standard

\lang english
Yes.
 Consider a graph that contains two gas station vertices 
\begin_inset Formula $f_{1},f_{2}$
\end_inset

 that are connected to each other, and the distance between them is less
 than the maximal distance the scooter can go when its fuel tank is full.
 Suppose the scooter is currently at $
\begin_inset Formula $f_{1}$
\end_inset

$.
 Therefore, its fuel tank is full.
 Let us denote this state as 
\begin_inset Formula $S_{1}$
\end_inset

$.
 Suppose it chooses to go to $
\begin_inset Formula $f_{2}$
\end_inset

$.
 Once it arrives at $
\begin_inset Formula $f_{2}$
\end_inset

$, its fuel level is once again full.
 Lastly, suppose the scooter chooses to go back to $
\begin_inset Formula $f_{1}$
\end_inset

$.
 Once it arrives there (for the second time), its fuel capacity is once
 again full.
 Note that the current state is identical to $
\begin_inset Formula $S_{1}$
\end_inset

$, as The sets $
\begin_inset Formula $T,F$
\end_inset

$ have not changed during this path's traversal, and the fuel levels were
 constant.
 Therefore, we have found a directed cycle in the graph.
\end_layout

\begin_layout Subsection*

\lang english
Question 4
\end_layout

\begin_layout Standard

\lang english
Let us first distinguish between the start state $
\begin_inset Formula $\left(v_{0},d_{0},\textrm{Ord},\emptyset\right)$
\end_inset

$ and all other states.
 
\end_layout

\begin_layout Standard

\lang english
Since we assume no order or gas station can be placed in $
\begin_inset Formula $v_{0}$
\end_inset

$, the only time the scooter will be at $
\begin_inset Formula $v_{0}$
\end_inset

$ is when the algorithm starts.
 Hence, we can count this state only once.
\end_layout

\begin_layout Standard

\lang english
Once we have the distinction above, the number of options for the scooter's
 location is $
\begin_inset Formula $k+l$
\end_inset

$, as it can only stop at gas stations (which there are $
\begin_inset Formula $l$
\end_inset

$ of) or delivery drop-off locations (which there are $
\begin_inset Formula $k$
\end_inset

$ of).
\end_layout

\begin_layout Standard

\lang english
As for the fuel level $
\begin_inset Formula $d$
\end_inset

$, if we assume the possible fuel levels are real values between $
\begin_inset Formula $0$
\end_inset

$ and $
\begin_inset Formula $d_{\textrm{refuel}}$
\end_inset

$ in, say, double-precision, then the number of options is $
\begin_inset Formula $2^{64}=18446744073709551616$
\end_inset

$ (with maximal resolution possible with respect to the real value range
 $
\begin_inset Formula $[0,d_{\textrm{refuel}}]$
\end_inset

$).
\end_layout

\begin_layout Standard

\lang english
As was pointed out in the exercise, we can keep track of only one of the
 sets $
\begin_inset Formula $T,F$
\end_inset

$, since the other is its complimentary set with respect to $
\begin_inset Formula $[k]=\{1,\dots,k\}$
\end_inset

$.
 Without loss of generality let us keep track of only $
\begin_inset Formula $T$
\end_inset

$.
 Hence, the number of possible sets $
\begin_inset Formula $T$
\end_inset

$ is $
\begin_inset Formula $|\mathcal{P}([k])|=2^{k}$
\end_inset

$, where $
\begin_inset Formula $\mathcal{P}()$
\end_inset

$ denotes the power set.
\end_layout

\begin_layout Standard

\lang english
To summarize, the resulting number of states is given by the formula $$
\begin_inset Formula 
\[
((k+l)\cdot(2^{64})\cdot2^{k})+1
\]

\end_inset

$$
\end_layout

\begin_layout Subsection*

\lang english
Question 5
\end_layout

\begin_layout Standard

\lang english
Yes.
 Assume that $
\begin_inset Formula $|T|\geq2$
\end_inset

$ and that the scooter has just enough gas to reach a certain delivery drop-off
 point $
\begin_inset Formula $t_{i}$
\end_inset

$ from its current location, and has exactly zero fuel left upon arrival
 at $
\begin_inset Formula $t_{i}$
\end_inset

$.
 The operation $
\begin_inset Formula $|T|\leftarrow|T|-1$
\end_inset

$ is computed, and the scooter cannot go further to any delivery drop-off
 point nor gas station in the graph, and the new state it's at is not a
 goal state since $
\begin_inset Formula $|T|\geq1$
\end_inset

.
\end_layout

\begin_layout Subsection*

\lang english
Question 6
\end_layout

\begin_layout Standard

\lang english
\begin_inset Formula 
\[
\text{Succ}_{1}\left(\left(v_{1},d_{1},T_{1},F_{1}\right)\right)=\left\{ \left(v_{2},d_{2},T_{2},F_{2}\right)\in S:\ \substack{v_{2}\in\text{ Ord }\\
d_{2}=d_{1}-\text{ Dist}\left(v_{1},v_{2}\right)\quad\land\quad d_{1}-\text{ Dist}\left(v_{1},v_{2}\right)\geq0\\
\exists i\in\left[k\right]:\quad i\in T_{1}\quad\land\quad T_{2}=T_{1}\setminus\left\{ i\right\} \quad\land\quad F_{2}=F_{1}\cup\left\{ i\right\} \\
\text{There exists a directed path \ensuremath{v_{1}\to\dots\to v_{2}} on the map}
}
\right\} 
\]

\end_inset


\begin_inset Formula 
\[
\text{Succ}_{2}\left(\left(v_{1},d_{1},T_{1},F_{1}\right)\right)=\left\{ \left(v_{2},d_{2},T_{2},F_{2}\right)\in S:\ \substack{v_{2}\in\text{ GasStations }\\
d_{2}=d_{\text{refuel}}\quad\land\quad d_{1}-\text{ Dist}\left(v_{1},v_{2}\right)\geq0\\
T_{1}=T_{2}\quad\land\quad F_{1}=F_{2}\\
\text{There exists a directed path \ensuremath{v_{1}\to\dots\to v_{2}} on the map}
}
\right\} 
\]

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Formula 
\[
\text{Succ}{\left(\left(v_{1},d_{1},T_{1},F_{1}\right)\right)}=\text{Succ}_{1}\left(\left(v_{1},d_{1},T_{1},F_{1}\right)\right)\ \cup\ \text{Succ}_{2}\left(\left(v_{1},d_{1},T_{1},F_{1}\right)\right)
\]

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 7
\end_layout

\begin_layout Standard

\lang english
If we ignore the fuel constraint and assume that $
\begin_inset Formula $d_{0}$
\end_inset

$ is very big such that the scooter does not need to refuel during its trip,
 the goal state minimal depth must be at least the number of delivery drop-off
 points $
\begin_inset Formula $k$
\end_inset

$, as the scooter must go through all of them to get to a goal state.
 If we reconsider the fuel constraint, each refuel operation adds one level
 of depth to the search, hence increasing the depth.
 Therefore, the minimal depth is $
\begin_inset Formula $k$
\end_inset

$.
\end_layout

\begin_layout Subsection*

\lang english
Question 8
\end_layout

\begin_layout Standard

\lang english
load_map_from_csv: 1.52sec
\end_layout

\begin_layout Standard

\lang english
Solve the map problem.
 Map(src: 54 dst: 549) UniformCost time: 0.59 #dev: 17355 total_cost: 7465.52897
 |path|: 137 path: [ 54, 55, 56, 57, 58, 59, 60, 28893, 14580, 14590, 14591,
 14592, 14593, 81892, 25814, 81, 26236, 26234, 1188, 33068, 33069, 33070,
 15474, 33071, 5020, 21699, 33072, 33073, 33074, 16203, 9847, 9848, 9849,
 9850, 9851, 335, 9852, 82906, 82907, 82908, 82909, 95454, 96539, 72369,
 94627, 38553, 72367, 29007, 94632, 96540, 9269, 82890, 29049, 29026, 82682,
 71897, 83380, 96541, 82904, 96542, 96543, 96544, 96545, 96546, 96547, 82911,
 82928, 24841, 24842, 24843, 5215, 24844, 9274, 24845, 24846, 24847, 24848,
 24849, 24850, 24851, 24852, 24853, 24854, 24855, 24856, 24857, 24858, 24859,
 24860, 24861, 24862, 24863, 24864, 24865, 24866, 82208, 82209, 82210, 21518,
 21431, 21432, 21433, 21434, 21435, 21436, 21437, 21438, 21439, 21440, 21441,
 21442, 21443, 21444, 21445, 21446, 21447, 21448, 21449, 21450, 21451, 621,
 21452, 21453, 21454, 21495, 21496, 539, 540, 541, 542, 543, 544, 545, 546,
 547, 548, 549]
\end_layout

\begin_layout Subsection*

\lang english
Question 11
\end_layout

\begin_layout Standard

\lang english
load_map_from_csv: 1.39sec
\end_layout

\begin_layout Standard

\lang english
Solve the map problem.
 Map(src: 54 dst: 549) A* (h=AirDist, w=0.500) time: 0.09 #dev: 2016 total_cost:
 7465.52897 |path|: 137 path: [ 54, 55, 56, 57, 58, 59, 60, 28893, 14580,
 14590, 14591, 14592, 14593, 81892, 25814, 81, 26236, 26234, 1188, 33068,
 33069, 33070, 15474, 33071, 5020, 21699, 33072, 33073, 33074, 16203, 9847,
 9848, 9849, 9850, 9851, 335, 9852, 82906, 82907, 82908, 82909, 95454, 96539,
 72369, 94627, 38553, 72367, 29007, 94632, 96540, 9269, 82890, 29049, 29026,
 82682, 71897, 83380, 96541, 82904, 96542, 96543, 96544, 96545, 96546, 96547,
 82911, 82928, 24841, 24842, 24843, 5215, 24844, 9274, 24845, 24846, 24847,
 24848, 24849, 24850, 24851, 24852, 24853, 24854, 24855, 24856, 24857, 24858,
 24859, 24860, 24861, 24862, 24863, 24864, 24865, 24866, 82208, 82209, 82210,
 21518, 21431, 21432, 21433, 21434, 21435, 21436, 21437, 21438, 21439, 21440,
 21441, 21442, 21443, 21444, 21445, 21446, 21447, 21448, 21449, 21450, 21451,
 621, 21452, 21453, 21454, 21495, 21496, 539, 540, 541, 542, 543, 544, 545,
 546, 547, 548, 549]
\end_layout

\begin_layout Subsection*

\lang english
Question 12
\end_layout

\begin_layout Standard

\lang english
When the weight is 
\begin_inset Formula $0.5$
\end_inset

, the algorithm is exactly the A* algorithm.
 As the weight increases, the algorithm gets closer to the greedy best search
 algorithm, with a weight value of 
\begin_inset Formula $1$
\end_inset

 being the greedy best search algorithm itself.
\end_layout

\begin_layout Standard

\lang english
As the weight increases, the algorithm relies more and more on the heuristic
 function and less and less on the cost of the current path, as we've seen
 in class.
 In addition, as the weight increases, we can see that the computation becomes
 computationally easier as less nodes are being expanded.
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename question12plot.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 14
\end_layout

\begin_layout Standard

\lang english
The MaxAirDist heuristic is indeed admissable, since it does not take into
 account all other nodes that need to be visited except for the node with
 the maximal air distance from the current node that has not been visited
 yet.
\end_layout

\begin_layout Standard

\lang english
In other words, if there is only one more node that needs to be visited
 before a goal state is reached, the MaxAirDist heuristic will return the
 exact distance to the goal state, which is $
\begin_inset Formula $h^{*}$
\end_inset

$, else, it will return a smaller value than $
\begin_inset Formula $h^{*}$
\end_inset

$, hence it is indeed admissable.
\end_layout

\begin_layout Subsection*

\lang english
Question 16
\end_layout

\begin_layout Standard

\lang english
Solve the relaxed deliveries problem.
 RelaxedDeliveries(big_delivery) A* (h=MaxAirDist, w=0.500) time: 3.82 #dev:
 3908 total_cost: 40844.21165 |path|: 11 path: [33919, 18409, 77726, 26690,
 31221, 63050, 84034, 60664, 70557, 94941, 31008] gas-stations: [31221,
 70557]
\end_layout

\begin_layout Subsection*

\lang english
Question 17
\end_layout

\begin_layout Standard

\lang english
Solve the relaxed deliveries problem.
 RelaxedDeliveries(big_delivery) A* (h=MSTAirDist, w=0.500) time: 1.19 #dev:
 87 total_cost: 40844.21165 |path|: 11 path: [33919, 18409, 77726, 26690,
 31221, 63050, 84034, 60664, 70557, 94941, 31008] gas-stations: [31221,
 70557]
\end_layout

\begin_layout Subsection*

\lang english
Question 18
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename question18plot.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 19
\end_layout

\begin_layout Standard

\lang english
\begin_inset Formula 
\[
\forall x_{i}\in x^{t}:\quad\text{Pr}\left(x_{i}\right)=\frac{\left(\frac{x_{i}}{\alpha}\right)^{-1/T}}{\sum_{j}\left(\frac{x_{j}}{\alpha}\right)^{-1/T}}=\frac{x_{i}^{-1/T}\cdot\alpha^{1/T}}{\sum_{j}\left(x_{j}^{-1/T}\cdot\alpha^{1/T}\right)}=\frac{x_{i}^{-1/T}\cdot\alpha^{1/T}}{\alpha^{1/T}\sum_{j}x_{j}^{-1/T}}=\frac{x_{i}^{-1/T}}{\sum_{j}x_{j}^{-1/T}}
\]

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 20
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename question20plot.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 21
\end_layout

\begin_layout Standard

\lang english
First let us notice that the expression can be rewritten in the form: $$
\begin_inset Formula 
\[
\forall x_{i}\in x:\quad\text{Pr}\left(x_{i}\right)=\frac{x_{i}^{-1/T}}{\sum_{j\in\left[N\right]}x_{j}^{-1/T}}=\dots=\frac{1}{1+\sum_{i\neq j}\left(\frac{x_{i}}{x_{j}}\right)^{1/T}}
\]

\end_inset

$$ And by taking the limit $T
\backslash
to0$, we have two options:
\end_layout

\begin_layout Enumerate

\lang english
if $
\begin_inset Formula $x_{i}<x_{j}$
\end_inset

$ for every $
\begin_inset Formula $i\neq j$
\end_inset

$ then $
\begin_inset Formula $\sum_{i\neq j}\left(\frac{x_{i}}{x_{j}}\right)^{1/T}\xrightarrow[T\to0]{}0$
\end_inset

$ and $
\begin_inset Formula $\lim_{T\to0}\text{Pr}\left(x_{i}\right)=\frac{1}{1+0}=1$
\end_inset

$.
 This is the case where $
\begin_inset Formula $x_{i}=\min_{j}\left\{ x_{j}\right\} _{j=1}^{N}=\alpha$
\end_inset

$ is the minimal element.
\end_layout

\begin_layout Enumerate

\lang english
if there exists at least one $
\begin_inset Formula $j$
\end_inset

$ such that $
\begin_inset Formula $x_{i}\geq x_{j}$
\end_inset

$ then we get: 
\end_layout

\begin_deeper
\begin_layout Enumerate

\lang english
$
\begin_inset Formula $\left(\frac{x_{i}}{x_{j}}\right)^{1/T}\xrightarrow[T\to0]{}\infty$
\end_inset

$ if $
\begin_inset Formula $x_{i}>x_{j}$
\end_inset

$, which leads to $
\begin_inset Formula $\lim_{T\to0}\text{Pr}\left(x_{i}\right)=\infty$
\end_inset

$.
 This is the case where $
\begin_inset Formula $x_{i}$
\end_inset

$ is not the minimal element of $
\begin_inset Formula $\left\{ x_{j}\right\} _{j=1}^{N}$
\end_inset

$.
\end_layout

\begin_layout Enumerate

\lang english
$
\begin_inset Formula $\left(\frac{x_{i}}{x_{j}}\right)^{1/T}=\left(1\right)^{1/T}=1\xrightarrow[T\to0]{}1$
\end_inset

$, if there is exactly one $
\begin_inset Formula $j$
\end_inset

$ that satisfies the equality $
\begin_inset Formula $x_{i}=x_{j}$
\end_inset

$.
\end_layout

\begin_layout Enumerate

\lang english
If there are $
\begin_inset Formula $\left\{ x_{k}\right\} _{k\in K}$
\end_inset

$ where $
\begin_inset Formula $K\subseteq N$
\end_inset

$ and $
\begin_inset Formula $2\leq\left|K\right|\leq\left|N\right|$
\end_inset

$ that satisfy $
\begin_inset Formula $x_{i}=x_{k}$
\end_inset

$ for all $
\begin_inset Formula $k\in K$
\end_inset

$, and all other coordinates satisfy $
\begin_inset Formula $x_{i}<x_{j}$
\end_inset

$ (such that their summands vanish), we get $
\begin_inset Formula $\lim_{T\to0}\text{Pr}\left(x_{i}\right)=\frac{1}{1+\left|K\right|\cdot1+\left(0+\dots+0\right)}=\frac{1}{1+K}$
\end_inset

$.
\end_layout

\end_deeper
\begin_layout Standard

\lang english
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 22
\end_layout

\begin_layout Standard

\lang english
By using the equivalent expression of the probability function from question
 21 and taking the limit $
\begin_inset Formula $T\to\infty$
\end_inset

$ while assuming $
\begin_inset Formula $x_{j}\neq0$
\end_inset

$ for all $
\begin_inset Formula $j$
\end_inset

$, we get $$
\begin_inset Formula 
\[
\lim_{T\to\infty}\text{Pr}\left(x_{i}\right)=\lim_{T\to\infty}\frac{1}{1+\sum_{i\neq j}\left(\underbrace{\frac{x_{i}}{x_{j}}}_{\neq0}\right)^{1/T}}=\frac{1}{1+\underbrace{\left(1+\dots+1\right)}_{N-1\text{ times}}}=\frac{1}{N}
\]

\end_inset

$$
\end_layout

\begin_layout Standard

\lang english
and since in our case $
\begin_inset Formula $N=5$
\end_inset

$, we get that indeed the limit is $
\begin_inset Formula $\frac{1}{5}=0.2$
\end_inset

$, as can be seen in the plot.
\end_layout

\begin_layout Subsection*

\lang english
Question 24
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename question24plot.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\lang english
Question 26
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename question26plot.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
